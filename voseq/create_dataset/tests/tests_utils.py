from django.test import TestCase
from django.test.client import Client
from django.core.management import call_command

from create_dataset.utils import CreateDataset
from create_dataset.views import guess_file_extension
from public_interface.models import Genes
from public_interface.models import TaxonSets


class CreateDatasetUtilsTest(TestCase):
    def setUp(self):
        args = []
        opts = {'dumpfile': 'test_db_dump2.xml', 'verbosity': 0}
        cmd = 'migrate_db'
        call_command(cmd, *args, **opts)

        g1 = Genes.objects.get(gene_code='COI-begin')
        g2 = Genes.objects.get(gene_code='ef1a')
        self.cleaned_data = {
            'gene_codes': [g1, g2],
            'taxonset': None,
            'voucher_codes': 'CP100-10\r\nCP100-11',
            'geneset': None,
            'taxon_names': ['CODE', 'SUPERFAMILY', 'GENUS', 'SPECIES'],
            'positions': ['ALL'],
            'translations': False,
            'partition_by_positions': 'by gene',
            'degen_translations': None,
            'number_genes': None,
            'file_format': 'FASTA',
            'aminoacids': False,
            'outgroup': None,
        }

        self.c = Client()
        self.dataset_creator = CreateDataset(self.cleaned_data)
        self.maxDiff = None

    def test_create_dataset(self):
        expected = '>CP100_10_Aus_aus'
        result = self.dataset_creator.dataset_str
        self.assertTrue(expected in result)

    def test_create_dataset_with_gene_code(self):
        self.cleaned_data['taxon_names'] = ['CODE', 'GENECODE']
        dataset_creator = CreateDataset(self.cleaned_data)
        expected = ">CP100_10\n"
        result = dataset_creator.dataset_str
        self.assertTrue(expected in result)

    def test_get_taxon_names_for_taxa(self):
        expected = {
            'CP100-10': {'code': 'CP100-10', 'genus': 'Aus', 'species': 'aus', 'superfamily': 'Papilionoidea'},
            'CP100-11': {'code': 'CP100-11', 'genus': 'Aus', 'species': 'bus', 'superfamily': 'Papilionoidea'},
        }
        result = self.dataset_creator.get_taxon_names_for_taxa()
        self.assertEqual(expected, result)

    def test_create_dataset_drop_voucher(self):
        cleaned_data = self.cleaned_data
        cleaned_data['voucher_codes'] = 'CP100-10\r\n--CP100-11'
        cleaned_data['taxonset'] = TaxonSets.objects.get(taxonset_name='all_taxa')
        dataset_creator = CreateDataset(cleaned_data)
        result = dataset_creator.dataset_str
        self.assertTrue('CP100-11' not in result)

    def test_get_taxon_names_for_taxa_additional_fields(self):
        self.cleaned_data['taxon_names'] = ['SUPERFAMILY']
        dataset_creator = CreateDataset(self.cleaned_data)
        expected = {
            'CP100-10': {'superfamily': 'Papilionoidea'},
            'CP100-11': {'superfamily': 'Papilionoidea'},
        }
        result = dataset_creator.get_taxon_names_for_taxa()
        self.assertEqual(expected, result)

    def test_dataset_all_codons_as_one(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_as_one_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_1st_as_one(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_1st_2nd_as_one(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_1st_2nd_3rd_as_one(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd', '3rd'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_2nd_3rd_codons_as_one(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['1st', '2nd', '3rd'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_2nd_3rd_codons_as_1st2nd_3rd_gene_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        g1.reading_frame = None
        g1.save()
        cleaned_data = self.cleaned_data.copy()
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['1st', '2nd', '3rd'],)
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_partitions_each(self):
        # TODO: fix test after fixing dataset-creator issue #26
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data.copy()
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL'],)
        cleaned_data['partition_by_positions'] = 'by gene',

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_1st_partitions_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st'],)
        cleaned_data['partition_by_positions'] = 'by gene',

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_1st_2nd_partitions_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd'],)
        cleaned_data['partition_by_positions'] = 'by gene',

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_codons_1st_2nd_3rd_partitions_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd', '3rd'],)
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
???????????????????AACAGTAACGTTAGGGCATAAAGAGCGTAAATTAGACAAAG
GTGATCACCATGGCGAGTCCAAAAATTCCCCTTATTATAAAGGAGGGAGTAGTCCCTTAA
GCAGTTGGTGATTTCTGGATTACGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTTTT
CTTCGTGGGAAACCAGCATAATTTGCGGGGGCATTCCTTTTTG
>CP100_11_Aus_bus
ATTTATGATGGAGGATCATAACAGTGACGTTAGGGCATAAAGAGCGTAAATTAGACAAAG
GTGATCACAATGGCGAGTCCAAAAATTCCCCTTATTATAAAGGAGGGAGTAGTCCCTTAA
GCAGTTGGTGATTTCTGGATTACGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTTTT
CTCCGTGGGAAACCAGcATAaTTTgC?????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_2nd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
???????????????????TTGCATGCCGCTTGAAATAACTTCCACTTTTTTTTTCTTTG
GTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCAT
CAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTT
TCTCTTCGCTCTTTCAGATACCTTACCGGGACTTAAATTGTTG
>CP100_11_Aus_bus
CTATTTGTGCGTTGCCTGTTTGCATGACGCTTGAAATAACTTCCACTTTTTTTTTCTTTG
GTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCAT
CAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAGTCAAATCTTTGCTGTCCTTTT
TCTCTTCGCTCTTTCAGATACc?Ta??????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_3rd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['3rd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
????????????????????TTAAAATCTAAACATTATTTTTTATTTTTATTTGTATTAT
AATTTATTCTAAACTTATTAAATTAATATCACTATAATGTTAAATTTCAAAGCTCCCATT
TCTAACATTAACTCATATACAATTAATTTTAATTTAATTAATTTAATATTATAATCAAAA
ATTATAATATCAAACATACATATTTCAAATATTTATATATATT
>CP100_11_Aus_bus
AAATTTTATAATAATATCTATTAAAATTAATATATTATTTTTCACTTTTATTTATATTAT
AACTTATTTTAAACTTATCTAATTAATACTCCTATAATATTTAATTTTAAAGTTCCTATT
TTCTATTTTAATCTATATATAATTATTTTTAATTTAATTTATTTAAAATTATTATAAAAA
ACTATAATATTAATTATATACcTTTT?????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_2nd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????ATATCGACGATTAGACCCGGTC
TTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGG
GGTTGGAATGCTATCCCTATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCC
CCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAAT
GCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATAC
ACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTT
CTTCTTCCGTTTGCGGGCATACATCTCTACGACGAATTAAACTCTTTTGACCGCGGGGGG
GACCATTTTACACATTTTTGTTTTGG
>CP100_11_Aus_bus
ACTTTATTATTTGGATTGGCGGATGTGGACTCCTAGTTATATCGACGATTGGAACCGGTC
TTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGG
GGTTGGAATGCTATCCATATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCC
CCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAAT
GCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATAC
ACATATAAATCGATAAAGATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTT
CTTCCTCCGTTTGCGGGCATACATCTCTACGAcGAATTAAaCTcT?TTgaC?????????
??????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_2nd_3rd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd', '3rd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = 'Cannot create dataset for only codon positions 2nd and 3rd.'
        result = dataset_creator.errors
        self.assertTrue(expected in ''.join(str(i) for i in result))

    def test_dataset_1st_3rd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '3rd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = 'Cannot create dataset for only codon positions 1st and 3rd.'
        result = dataset_creator.errors
        self.assertTrue(expected in ''.join(str(i) for i in result))

    def test_dataset_1st_3rd_codon_partition_1st2nd_3rd_gene_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '3rd']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
???????????????????AACAGTAACGTTAGGGCATAAAGAGCGTAAATTAGACAAAG
GTGATCACCATGGCGAGTCCAAAAATTCCCCTTATTATAAAGGAGGGAGTAGTCCCTTAA
GCAGTTGGTGATTTCTGGATTACGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTTTT
CTTCGTGGGAAACCAGCATAATTTGCGGGGGCATTCCTTTTTG
>CP100_11_Aus_bus
ATTTATGATGGAGGATCATAACAGTGACGTTAGGGCATAAAGAGCGTAAATTAGACAAAG
GTGATCACAATGGCGAGTCCAAAAATTCCCCTTATTATAAAGGAGGGAGTAGTCCCTTAA
GCAGTTGGTGATTTCTGGATTACGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTTTT
CTCCGTGGGAAACCAGcATAaTTTgC?????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_2nd_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
???????????????????TTGCATGCCGCTTGAAATAACTTCCACTTTTTTTTTCTTTG
GTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCAT
CAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTT
TCTCTTCGCTCTTTCAGATACCTTACCGGGACTTAAATTGTTG
>CP100_11_Aus_bus
CTATTTGTGCGTTGCCTGTTTGCATGACGCTTGAAATAACTTCCACTTTTTTTTTCTTTG
GTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCAT
CAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAGTCAAATCTTTGCTGTCCTTTT
TCTCTTCGCTCTTTCAGATACc?Ta??????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['3rd']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
????????????????????TTAAAATCTAAACATTATTTTTTATTTTTATTTGTATTAT
AATTTATTCTAAACTTATTAAATTAATATCACTATAATGTTAAATTTCAAAGCTCCCATT
TCTAACATTAACTCATATACAATTAATTTTAATTTAATTAATTTAATATTATAATCAAAA
ATTATAATATCAAACATACATATTTCAAATATTTATATATATT
>CP100_11_Aus_bus
AAATTTTATAATAATATCTATTAAAATTAATATATTATTTTTCACTTTTATTTATATTAT
AACTTATTTTAAACTTATCTAATTAATACTCCTATAATATTTAATTTTAAAGTTCCTATT
TTCTATTTTAATCTATATATAATTATTTTTAATTTAATTTATTTAAAATTATTATAAAAA
ACTATAATATTAATTATATACcTTTT?????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_2nd_each(self):
        # TODO fix test when dataset-creator has issue #26 fixed
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????ATATCGACGATTAGACCCGGTC
TTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGG
GGTTGGAATGCTATCCCTATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCC
CCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAAT
GCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATAC
ACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTT
CTTCTTCCGTTTGCGGGCATACATCTCTACGACGAATTAAACTCTTTTGACCGCGGGGGG
GACCATTTTACACATTTTTGTTTTGG
>CP100_11_Aus_bus
ACTTTATTATTTGGATTGGCGGATGTGGACTCCTAGTTATATCGACGATTGGAACCGGTC
TTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGG
GGTTGGAATGCTATCCATATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCC
CCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAAT
GCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATAC
ACATATAAATCGATAAAGATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTT
CTTCCTCCGTTTGCGGGCATACATCTCTACGAcGAATTAAaCTcT?TTgaC?????????
??????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '3rd']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = 'Cannot create dataset for only codon positions 1st and 3rd.'
        result = dataset_creator.errors
        self.assertTrue(expected in ''.join(str(i) for i in result))

    def test_dataset_2nd_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd', '3rd']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = 'Cannot create dataset for only codon positions 2nd and 3rd.'
        result = dataset_creator.errors
        self.assertTrue(expected in ''.join(str(i) for i in result))

    def test_dataset_2nd_3rd_paritions_1st2nd_3rd_gene_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd', '3rd']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_2nd_3rd_each(self):
        # TODO Fix this test after fixing dataset-creator issue #26
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd', '3rd']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_1st_2nd_3rd_each(self):
        # TODO: fix test after fixing dataset-creator issue #26
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['ALL', '1st', '2nd', '3rd']
        cleaned_data['partition_by_positions'] = 'by gene'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_codon_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI-begin_1st
----
>CP100-10_Aus_aus
???????????????????AACAGTAACGTTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCACCATGGCGAGTCCAAAAATTCCCCTTATTATAAAGGAGGGAGTAGTCCCTTAAGCAGTTGGTGATTTCTGGATTACGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTTTTCTTCGTGGGAAACCAGCATAATTTGCGGGGGCATTCCTTTTTG
>CP100-11_Aus_bus
ATTTATGATGGAGGATCATAACAGTGACGTTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCACAATGGCGAGTCCAAAAATTCCCCTTATTATAAAGGAGGGAGTAGTCCCTTAAGCAGTTGGTGATTTCTGGATTACGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTTTTCTCCGTGGGAAACCAGcATAaTTTgC?????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_2nd_codon_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
???????????????????TTGCATGCCGCTTGAAATAACTTCCACTTTTTTTTTCTTTG
GTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCAT
CAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTT
TCTCTTCGCTCTTTCAGATACCTTACCGGGACTTAAATTGTTG
>CP100_11_Aus_bus
CTATTTGTGCGTTGCCTGTTTGCATGACGCTTGAAATAACTTCCACTTTTTTTTTCTTTG
GTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCAT
CAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAGTCAAATCTTTGCTGTCCTTTT
TCTCTTCGCTCTTTCAGATACc?Ta??????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_3rd_codon_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['3rd']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
????????????????????TTAAAATCTAAACATTATTTTTTATTTTTATTTGTATTAT
AATTTATTCTAAACTTATTAAATTAATATCACTATAATGTTAAATTTCAAAGCTCCCATT
TCTAACATTAACTCATATACAATTAATTTTAATTTAATTAATTTAATATTATAATCAAAA
ATTATAATATCAAACATACATATTTCAAATATTTATATATATT
>CP100_11_Aus_bus
AAATTTTATAATAATATCTATTAAAATTAATATATTATTTTTCACTTTTATTTATATTAT
AACTTATTTTAAACTTATCTAATTAATACTCCTATAATATTTAATTTTAAAGTTCCTATT
TTCTATTTTAATCTATATATAATTATTTTTAATTTAATTTATTTAAAATTATTATAAAAA
ACTATAATATTAATTATATACcTTTT?????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_2nd_codons_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI-begin_1st-2nd
----
>CP100-10_Aus_aus
??????????????????????????????????????ATATCGACGATTAGACCCGGTCTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTATCCCTATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCCCCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTTCTTCTTCCGTTTGCGGGCATACATCTCTACGACGAATTAAACTCTTTTGACCGCGGGGGGGACCATTTTACACATTTTTGTTTTGG
>CP100-11_Aus_bus
ACTTTATTATTTGGATTGGCGGATGTGGACTCCTAGTTATATCGACGATTGGAACCGGTCTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTATCCATATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCCCCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATACACATATAAATCGATAAAGATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTTCTTCCTCCGTTTGCGGGCATACATCTCTACGAcGAATTAAaCTcT?TTgaC???????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_1st_2nd_3rd_codons_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['ALL']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI-begin_1st-2nd
----
>CP100-10_Aus_aus
??????????????????????????????????????ATATCGACGATTAGACCCGGTCTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTATCCCTATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCCCCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTTCTTCTTCCGTTTGCGGGCATACATCTCTACGACGAATTAAACTCTTTTGACCGCGGGGGGGACCATTTTACACATTTTTGTTTTGG
>CP100-11_Aus_bus
ACTTTATTATTTGGATTGGCGGATGTGGACTCCTAGTTATATCGACGATTGGAACCGGTCTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTATCCATATTTGGGCCCGAATGCTTCCCGATAAAAATAGTTTGCTCTCCCCTCTTATTTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGTCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATCTGGGCATAATTATACACATATAAATCGATAAAGATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTTTTTTTCTTCCTCCGTTTGCGGGCATACATCTCTACGAcGAATTAAaCTcT?TTgaC???????????????????????????????????

>COI-begin_3rd
----
>CP100-10_Aus_aus
????????????????????TTAAAATCTAAACATTATTTTTTATTTTTATTTGTATTATAATTTATTCTAAACTTATTAAATTAATATCACTATAATGTTAAATTTCAAAGCTCCCATTTCTAACATTAACTCATATACAATTAATTTTAATTTAATTAATTTAATATTATAATCAAAAATTATAATATCAAACATACATATTTCAAATATTTATATATATT
>CP100-11_Aus_bus
AAATTTTATAATAATATCTATTAAAATTAATATATTATTTTTCACTTTTATTTATATTATAACTTATTTTAAACTTATCTAATTAATACTCCTATAATATTTAATTTTAAAGTTCCTATTTTCTATTTTAATCTATATATAATTATTTTTAATTTAATTTATTTAAAATTATTATAAAAAACTATAATATTAATTATATACcTTTT?????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_dataset_all_1st_codons_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI-begin')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['ALL', '1st']
        cleaned_data['partition_by_positions'] = '1st-2nd, 3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>CP100_10_Aus_aus
??????????????????????????????????????????????????????????AT
TATTCGAACAGAATTAAGTACCCCTGGATCATTAATCGGAGATGATCAAATTTATAATAC
TATTGTTACAGCTCATGCTTTTATTATAATTTTTTTTATGGTTATACCTATTATAATTGG
AGGATTTGGTAATTGACTTATTCCCCTTATATTAGGAGCCCCTGATATAGCTTTTCCACG
AATAAATAATATAAGATTTTGACTTCTCCCACCCTCTTTAATTTTATTAATTTCGAGTAG
TATAGTAGAAAATGGTGCTGGCACAGGATGAACGGTCTATCCCCCCCTCTCATCTAATAT
TGCCCATAGAGGATCCTCAGTTGATTTAGCAATCTTTTCCTTACATTTAGCTGGAATCTC
ATCAATTCTTGGAGCAATTAATTTTATTACAACAATTATTAATATACGAATTAATAAAAT
ATCTTATGATCAAATACCTTTATTTGTTTGAGCTGTAGGAATTACCGCATTATTATTATT
ACTTTCTTTACCTGTATTAGCTGGAGCTATCACAATACTACTCACAGATCGAAACTTAAA
TACATCTTTTTTTGACCCAGCAGGAGGTGGAGATCCTATTTTATATCAACATTTATTTTG
ATTTTTTGG
>CP100_11_Aus_bus
AACATTATATTTTATTTTTGGAATTTGAGCAGGTATAGTAGGTACATCTCTCAGTTTAAT
TATTCGAACAGAATTAGGTAATCCAGGATCTTTAATTGGAGATGATCAAATTTATAATAC
TATTGTCACAGCCCATGCTTTTATTATAATTTTTTTTATAGTTATACCTATTATAATTGG
AGGATTCGGTAATTGACTTATTCCTATTATATTAGGAGCCCCTGATATAGCTTTCCCTCG
AATAAATAATATAAGATTTTGACTCCTTCCCCCCTCTTTAATTTTATTAATTTCAAGTAG
TATTGTAGAAAATGGTGCTGGTACAGGATGAACGGTTTATCCCCCCCTTTCATCTAATAT
TGCTCACAGTGGATCTTCTGTTGATTTAGCAATTTTCTCTTTACATTTAGCTGGAATTTC
ATCAATTCTTGGAGCTATTAATTTTATTACAACAATTATTAATATACGAATTAATAGTAT
ATCTTATGATCAAATACCATTATTTGTTTGAGCTGTTGGAATTACAGCATTATTATTATT
ACTCTCTCTACCTGTATTAGCTGGAGCTATTACAATACTTCTTACAGATcGAAATTTAAA
CaCcTcTT?TTTTgaTC???????????????????????????????????????????
?????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.lstrip(), result)

    def test_has_no_sequences_for_input_voucher(self):
        cleaned_data = self.cleaned_data
        cleaned_data['voucher_codes'] = 'CP100-10\r\nCP100-11\r\nCP1000'
        dataset_creator = CreateDataset(cleaned_data)
        self.assertTrue('Could not find voucher CP1000' in dataset_creator.warnings)

    def test_creating_dataset_filename(self):
        tmp_file_name = 'MEGA_b879d2a046d04821be618bf481b6b08d.txt'
        result = guess_file_extension(tmp_file_name)
        expected = 'MEGA_b879d2a046d04821be618bf481b6b08d.meg'
        self.assertEqual(expected, result)

from django.test import TestCase
from django.test.client import Client
from django.core.management import call_command

from create_dataset.utils import CreateDataset
from create_dataset.views import guess_file_extension
from public_interface.models import Genes
from public_interface.models import GeneSets
from public_interface.models import TaxonSets


class CreateDatasetUtilsTest(TestCase):
    def setUp(self):
        args = []
        opts = {'dumpfile': 'test_db_dump.xml', 'verbosity': 0}
        cmd = 'migrate_db'
        call_command(cmd, *args, **opts)

        g1 = Genes.objects.get(gene_code='COI')
        g2 = Genes.objects.get(gene_code='EF1a')
        self.cleaned_data = {
            'gene_codes': [g1, g2],
            'taxonset': None,
            'voucher_codes': 'CP100-10\r\nCP100-11',
            'geneset': None,
            'taxon_names': ['CODE', 'SUPERFAMILY', 'GENUS', 'SPECIES'],
            'positions': ['ALL'],
            'partition_by_positions': 'ONE',
            'degen_translations': None,
            'number_genes': None,
            'file_format': 'FASTA',
            'aminoacids': False,
            'outgroup': '',
        }

        self.c = Client()
        self.dataset_creator = CreateDataset(self.cleaned_data)
        self.maxDiff = None

    def test_create_dataset(self):
        expected = '>COI\n--------------------\n>CP100-10_Papilionoidea_Melitaea_diamina'
        result = self.dataset_creator.dataset_str
        self.assertTrue(expected in result)

    def test_create_dataset_with_gene_code(self):
        self.cleaned_data['taxon_names'] = ['CODE', 'GENECODE']
        dataset_creator = CreateDataset(self.cleaned_data)
        expected = ">CP100-10_COI\n"
        result = dataset_creator.dataset_str
        self.assertTrue(expected in result)

    def test_get_taxon_names_for_taxa(self):
        expected = {
            'CP100-10': {'code': 'CP100-10', 'genus': 'Melitaea', 'species': 'diamina', 'superfamily': 'Papilionoidea'},
            'CP100-11': {'code': 'CP100-11', 'genus': 'Melitaea', 'species': 'diamina', 'superfamily': ''},
        }
        result = self.dataset_creator.get_taxon_names_for_taxa()
        self.assertEqual(expected, result)

    def test_create_dataset_drop_voucher(self):
        cleaned_data = self.cleaned_data
        cleaned_data['voucher_codes'] = 'CP100-10\r\n--CP100-11'
        cleaned_data['taxonset'] = TaxonSets.objects.get(taxonset_name='Erebia')
        dataset_creator = CreateDataset(cleaned_data)
        result = dataset_creator.dataset_str
        self.assertTrue('CP100-11' not in result)

    def test_get_taxon_names_for_taxa_additional_fields(self):
        self.cleaned_data['taxon_names'] = ['SUPERFAMILY']
        dataset_creator = CreateDataset(self.cleaned_data)
        expected = {
            'CP100-10': {'superfamily': 'Papilionoidea'},
            'CP100-11': {'superfamily': ''},
        }
        result = dataset_creator.get_taxon_names_for_taxa()
        self.assertEqual(expected, result)

    def test_dataset_all_codons_as_one(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
?????????????????????????TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
??TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_as_one_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>16S
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????CGTGGTATCACTATTGATATTGCTSTATGGAAGTTCGAAACGAGCAGATACTATGTCACCATCATTGATGCTCCCGGACACAGAGATTTCATCAAGGACATGATTACTGGGACATCACAAGCCGATTGCGCCGTGCTTATCGTCGCAGCCGGTACTGGTGAGTTCGAAGCTGGTATCTCGGAGGACGGACAAACCCGTGAGCATGCTCTTCTCGCATTCACACTCGGTGTAAAGCAGCTGATAGTGGGTGTCAACAAAATGGACTCTACTGAGCCCCCATACAGCGAGCCACGTTTTGAGGAAATCAAAAAAGAAGTGTCCTCATACATTAAGAAAATTGGTTACAACCCAGCTGCCGTCGCGTTCGTGCCCATTTCTGGCTGGCATGGAGACAACATGCTGGAGCCATCTACCAAGATGCCCTGGTTCAAGGGATGGCAAGTGGATCGCAAAGAAGGCAAGGGTGAAGGTAAATGCCTTATTGAAGCCCTGGACGCCATTCTGCCTCC??
>CP100-11_Melitaea_diamina

"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_1st_as_one(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
?????????????????????????TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
??TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_1st_2nd_as_one(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
?????????????????????????TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
??TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_1st_2nd_3rd_as_one(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd', '3rd'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
?????????????????????????TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
??TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_3rd_codons_as_one(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['1st', '2nd', '3rd'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
?????????????????????????TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
??TGAGCCGGTATAATTGGTACATCCCTAAGTCTTATTATTCGAACCGAATTAGGAAATCCTAGTTTTTTAATTGGAGATGATCAAATTTATAATACCATTGTAACAGCTCATGCTTTTATTATAATTTTTTTTATAGTTATGCCAATTATAATTGGAGGATTTGGTAATTGACTTGTACCATTAATATTGGGAGCCCCAGATATAGCTTTCCCCCGAATAAATTATATAAGATTTTGATTATTGCCTCCATCCTTAATTCTTTTAATTTCAAGTAGAATTGTAGAAAATGGGGCAGGAACTGGATGAACAGTTTACCCCCCACTTTCATCTAATATTGCCCATAGAGGAGCTTCAGTGGATTTAGCTATTTTTTCTTTACATTTAGCTGGGATTTCCTCTATCTTAGGAGCTATTAATTTTATTACTACAATTATTAATATACGAATTAATAATATATCTTATGATCAAATACCTTTATTTGTATGAGCAGTAGGAATTACAGCATTACTTCTCTTATTATCTTTACCAGTTTTAGCTGGAGCTATTACTATACTTTTAACGGATCGAAATCTTAATACCTCATTTTTTGATTCCTGCGGAGGAGGAGATCC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_3rd_codons_as_1st2nd_3rd_gene_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['1st', '2nd', '3rd'],)
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_codons_as_one_gene_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['1st', '2nd'],)

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_partitions_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL'],)
        cleaned_data['partition_by_positions'] = 'EACH',

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_1st2nd_3rd_partitions_gene_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL'],)
        cleaned_data['partition_by_positions'] = '1st2nd_3rd',

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_1st_partitions_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st'],)
        cleaned_data['partition_by_positions'] = 'EACH',

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_1st_2nd_partitions_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd'],)
        cleaned_data['partition_by_positions'] = 'EACH',

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_codons_1st_2nd_3rd_partitions_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        cleaned_data['positions'] = list(['ALL', '1st', '2nd', '3rd'],)
        cleaned_data['partition_by_positions'] = 'EACH',

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_2nd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_3rd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['3rd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????TGGCGGATATGGACTCCTAGCTATATCGACGATTGGAACCAGTTTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTGTCCTTATTTGGGCCCGAATGCTTCCCGATAATAATAGTTTGTTTTCCCCTCTTATCTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGGCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATTTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTCTCTTTTTTCTTCCGTTTGCGGGCATACATCTTTACGACGAACTAAACTCTTTTGATCTGGGGGGGGACC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?TAGCGTAAATGTAATCCAATCTATATCAACGATAGAATCTATTTTAATGAGTGTCAATTTATACATGAAAGTCTGTTTATAAATTTTTAAGTAGCAATAAATGAGATTGTATTACTGACATAAATGGAGCCAGTAAGTTCCCCAAAATTTAAAATTTATATGCTCATCTAATCTTAATTAATAAATGAGAATGGGAGAATGATAAAGTTCCCCACTTATTATATGCCTAAGAGTTAGGGTTAGTATTTTTTACTTAGTGGATTCTTACTAGAGTATATTTATATAAATATATAACAATATATAATTTTGTCAAACTTATTGATAGAGAGAATAAGATACTCCTATATTTACAGTTAGTGAGTATATAACTTAAGGTCAATCTATACTATTTTGTTCTCGAGAGAGTC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_2nd_3rd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd', '3rd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????GACCGTTATTGTCACCTAGTTTTTTTGACCAATAGAATCTGTTTTATTGAATATAATTATATCCTTTACACTATCTTTTTTATTTTTTTATTTGCATTTATTGAGATTGTATGATTTACATATATGGACCCAATTACTTCCCGATAATATTAGATTGATATGCTCACCTATTTTTATTCAGTGATTTAAAATGGCAGACTGAGACATTACCCCATTCACTATTTCCATGAGACTCATGATTACTTTTTCTTAATTACTGGTTCCCTTCTAGACTTTATTTTTCTCATTTTATTAGATTATATTACTATATAATACTTATTTAGACATAGATTCACATATTTCTATACTTACATTTACTGACTTTCTTATTTACGATGAATTTATCCCATTTTATCCGCGAGAGAATC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGCGGATATGGACTCCTAGCTATATCGACGATTGGAACCAGTTTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTGTCCTTATTTGGGCCCGAATGCTTCCCGATAATAATAGTTTGTTTTCCCCTCTTATCTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGGCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATTTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTCTCTTTTTTCTTCCGTTTGCGGGCATACATCTTTACGACGAACTAAACTCTTTTGATCTGGGGGGGGACC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_3rd_codon_one_partition(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '3rd']

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????TAGCGTAAATGTAATCCAATCTATATCAACGATAGAATCTATTTTAATGAGTGTCAATTTATACATGAAAGTCTGTTTATAAATTTTTAAGTAGCAATAAATGAGATTGTATTACTGACATAAATGGAGCCAGTAAGTTCCCCAAAATTTAAAATTTATATGCTCATCTAATCTTAATTAATAAATGAGAATGGGAGAATGATAAAGTTCCCCACTTATTATATGCCTAAGAGTTAGGGTTAGTATTTTTTACTTAGTGGATTCTTACTAGAGTATATTTATATAAATATATAACAATATATAATTTTGTCAAACTTATTGATAGAGAGAATAAGATACTCCTATATTTACAGTTAGTGAGTATATAACTTAAGGTCAATCTATACTATTTTGTTCTCGAGAGAGTC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?GACCGTTATTGTCACCTAGTTTTTTTGACCAATAGAATCTGTTTTATTGAATATAATTATATCCTTTACACTATCTTTTTTATTTTTTTATTTGCATTTATTGAGATTGTATGATTTACATATATGGACCCAATTACTTCCCGATAATATTAGATTGATATGCTCACCTATTTTTATTCAGTGATTTAAAATGGCAGACTGAGACATTACCCCATTCACTATTTCCATGAGACTCATGATTACTTTTTCTTAATTACTGGTTCCCTTCTAGACTTTATTTTTCTCATTTTATTAGATTATATTACTATATAATACTTATTTAGACATAGATTCACATATTTCTATACTTACATTTACTGACTTTCTTATTTACGATGAATTTATCCCATTTTATCCGCGAGAGAATC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_3rd_codon_partition_1st2nd_3rd_gene_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '3rd']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_2nd_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['3rd']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '3rd']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_2nd_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd', '3rd']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_2nd_3rd_paritions_1st2nd_3rd_gene_with_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd', '3rd']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd', '3rd']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_ALL_1st_2nd_3rd_each(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['ALL', '1st', '2nd', '3rd']
        cleaned_data['partition_by_positions'] = 'EACH'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_all_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['ALL']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_2nd_codons
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????TGGCGGATATGGACTCCTAGCTATATCGACGATTGGAACCAGTTTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTGTCCTTATTTGGGCCCGAATGCTTCCCGATAATAATAGTTTGTTTTCCCCTCTTATCTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGGCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATTTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTCTCTTTTTTCTTCCGTTTGCGGGCATACATCTTTACGACGAACTAAACTCTTTTGATCTGGGGGGGGACC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?TAGCGTAAATGTAATCCAATCTATATCAACGATAGAATCTATTTTAATGAGTGTCAATTTATACATGAAAGTCTGTTTATAAATTTTTAAGTAGCAATAAATGAGATTGTATTACTGACATAAATGGAGCCAGTAAGTTCCCCAAAATTTAAAATTTATATGCTCATCTAATCTTAATTAATAAATGAGAATGGGAGAATGATAAAGTTCCCCACTTATTATATGCCTAAGAGTTAGGGTTAGTATTTTTTACTTAGTGGATTCTTACTAGAGTATATTTATATAAATATATAACAATATATAATTTTGTCAAACTTATTGATAGAGAGAATAAGATACTCCTATATTTACAGTTAGTGAGTATATAACTTAAGGTCAATCTATACTATTTTGTTCTCGAGAGAGTC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_ALL_1st2nd_3rd_using_geneset_and_taxonset(self):
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = []
        cleaned_data['positions'] = ['ALL']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'
        cleaned_data['taxonset'] = TaxonSets.objects.get(taxonset_name='Erebia')
        cleaned_data['geneset'] = GeneSets.objects.get(geneset_name='4genes')
        cleaned_data['voucher_codes'] = ''

        dataset_creator = CreateDataset(cleaned_data)
        result = dataset_creator.dataset_str

        expected = """
>COI_1st_2nd_codons
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????TGGCGGATATGGACTCCTAGCTATATCGACGATTGGAACCAGTTTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTGTCCTTATTTGGGCCCGAATGCTTCCCGATAATAATAGTTTGTTTTCCCCTCTTATCTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGGCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATTTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTCTCTTTTTTCTTCCGTTTGCGGGCATACATCTTTACGACGAACTAAACTCTTTTGATCTGGGGGGGGACC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?TAGCGTAAATGTAATCCAATCTATATCAACGATAGAATCTATTTTAATGAGTGTCAATTTATACATGAAAGTCTGTTTATAAATTTTTAAGTAGCAATAAATGAGATTGTATTACTGACATAAATGGAGCCAGTAAGTTCCCCAAAATTTAAAATTTATATGCTCATCTAATCTTAATTAATAAATGAGAATGGGAGAATGATAAAGTTCCCCACTTATTATATGCCTAAGAGTTAGGGTTAGTATTTTTTACTTAGTGGATTCTTACTAGAGTATATTTATATAAATATATAACAATATATAATTTTGTCAAACTTATTGATAGAGAGAATAAGATACTCCTATATTTACAGTTAGTGAGTATATAACTTAAGGTCAATCTATACTATTTTGTTCTCGAGAGAGTC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        self.assertTrue(expected.strip() in result)

        expected = """
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        self.assertTrue(expected.strip() in result)

        expected = """
>EF1a_1st_2nd_codons
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
??????????AATCACACACGGCATTATTAAATGGGGGATGAAACGACATGAAATTGAAAGAGCCAGAATGGAAGGTCTTAATAGCTGGTTTGAAACTAAGCGACGGACGGGATACATGAATGCCTTGAATTGAACGCAATATAGTACATATGAGCCCGGCAAGGATTATAAAAATATACGGACTCCAGCGATGGCGTCTATGTGCGCGGACGGGATTGAGCGGATTCAAAAGGCAACCGGACAGCCTCTGCTTACTTGGGTAACACTATGTGGGTAAAAATGATCACGACCCCTAAAGAGGCGTTGAGAATAAAAGAGTTCTCTAATAAAAATGGTAAACCGCGCGTGCTTGTCCATTCGGTGCAGGGAAAATCTGACCTCACAAATTCCGTTAAGGTGCAGTGACGAAGAGGAAG??AGGAATGCTATGAGCC??AGCATCTCCCCG???CCAC????????????????????????????????ATGGACGTCCGTGGAGGTGAACGGATCTAACCGGACATGTGTTTGCCCGCAAATACACGAGTAATCGTGAATCACAGAGCCTCAGAGCGTCCGGGAAAGTGGTTAAGTAAAAGTTCGTAAGATTCGCGGGTAGTGCGGGATCAAAAAACCCCAAGGGCGCGATTACGCCAGTATGTCTAACACCGGCAATTCAAGGTAACCCGTCTGATGCAACGCCAATGCTGAATTGCGAATAAGAAAGTGACGCGTCGGAATCACGAGAAACCAATCATAATCGGGAGCGCATGTAATTGTCCTCAACCCTTGGTGAGCTTCAGATTCCCCCTGGCG
"""
        self.assertTrue(expected.strip() in result)

        expected = """
>EF1a_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????CGCCCCCCGTCATTTCCATCCGGCGGACGAGCGTCCGCTGGGCATGTGCGTTCTTTTTGGGCGTCACTACCCTTCACATCCGCGCCAAAACTCCATCCCCTTTGCACTCAGCTGCTGCTGCCCAATAGGGTAACCAGCCTGCACTGATCGACAGAGCTCCGGCTCCATCCTCACTTCGCACCGGGATCAGCGCGAGAGGCAACG?ATACCTAT?CCCTTG??C????????????????TTTAGCACAAATTCCAATCTTTCTCCCCCTACATGGGCCATCAGTATACTATCCCGCTCCGAATTTTATTCCGCCACGATTCCCAACTGCCCCTACCTCCATGCTCCATCTCCACCACAAGTCTTCTAYTGCTTATCATTTTCTGCGATCACCTGGCCAACATTT
"""
        self.assertTrue(expected.strip() in result)

    def test_dataset_1st_codon_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_codon_1st2nd_3rd_gene_has_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_2nd_codon_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['2nd']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_2nd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
TGGAAGATCACAACAGTGACATTAGGGCATAAAGAGCGTAAATTAGACAAAGGTGATCGCTATGGCGAGTCCAATAATTTTCCTTACTATAAAGGAGGGAGTAGTCCCTTAAGCAGGTGGTGATTTCTGGATTATGGAATAAAAAAACAAAATTGCACTTGTGGGAAGTCCTTTTCGTGGGAAACTAGCACAATTTGTTGGGGC?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_3rd_codon_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['3rd']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_codons_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_2nd_codons
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????TGGCGGATATGGACTCCTAGCTATATCGACGATTGGAACCAGTTTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTGTCCTTATTTGGGCCCGAATGCTTCCCGATAATAATAGTTTGTTTTCCCCTCTTATCTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGGCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATTTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTCTCTTTTTTCTTCCGTTTGCGGGCATACATCTTTACGACGAACTAAACTCTTTTGATCTGGGGGGGGACC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?TAGCGTAAATGTAATCCAATCTATATCAACGATAGAATCTATTTTAATGAGTGTCAATTTATACATGAAAGTCTGTTTATAAATTTTTAAGTAGCAATAAATGAGATTGTATTACTGACATAAATGGAGCCAGTAAGTTCCCCAAAATTTAAAATTTATATGCTCATCTAATCTTAATTAATAAATGAGAATGGGAGAATGATAAAGTTCCCCACTTATTATATGCCTAAGAGTTAGGGTTAGTATTTTTTACTTAGTGGATTCTTACTAGAGTATATTTATATAAATATATAACAATATATAATTTTGTCAAACTTATTGATAGAGAGAATAAGATACTCCTATATTTACAGTTAGTGAGTATATAACTTAAGGTCAATCTATACTATTTTGTTCTCGAGAGAGTC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_codons_1st2nd_3rd_gene_has_no_reading_frame(self):
        g1 = Genes.objects.get(gene_code='16S')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = ""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_1st_2nd_3rd_codons_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['1st', '2nd', '3rd']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_2nd_codons
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????TGGCGGATATGGACTCCTAGCTATATCGACGATTGGAACCAGTTTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTGTCCTTATTTGGGCCCGAATGCTTCCCGATAATAATAGTTTGTTTTCCCCTCTTATCTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGGCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATTTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTCTCTTTTTTCTTCCGTTTGCGGGCATACATCTTTACGACGAACTAAACTCTTTTGATCTGGGGGGGGACC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?TAGCGTAAATGTAATCCAATCTATATCAACGATAGAATCTATTTTAATGAGTGTCAATTTATACATGAAAGTCTGTTTATAAATTTTTAAGTAGCAATAAATGAGATTGTATTACTGACATAAATGGAGCCAGTAAGTTCCCCAAAATTTAAAATTTATATGCTCATCTAATCTTAATTAATAAATGAGAATGGGAGAATGATAAAGTTCCCCACTTATTATATGCCTAAGAGTTAGGGTTAGTATTTTTTACTTAGTGGATTCTTACTAGAGTATATTTATATAAATATATAACAATATATAATTTTGTCAAACTTATTGATAGAGAGAATAAGATACTCCTATATTTACAGTTAGTGAGTATATAACTTAAGGTCAATCTATACTATTTTGTTCTCGAGAGAGTC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_dataset_ALL_1st_codons_1st2nd_3rd(self):
        g1 = Genes.objects.get(gene_code='COI')
        cleaned_data = self.cleaned_data
        cleaned_data['gene_codes'] = [g1]
        del cleaned_data['positions']
        cleaned_data['positions'] = ['ALL', '1st']
        cleaned_data['partition_by_positions'] = '1st2nd_3rd'

        dataset_creator = CreateDataset(cleaned_data)
        expected = """
>COI_1st_2nd_codons
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????????????TGGCGGATATGGACTCCTAGCTATATCGACGATTGGAACCAGTTTTATGGGAGACAATTAAAACATGTACGCCAGCTTATATATTTTTATGTATCCATATATGGGGTTGGAATGCTGTCCTTATTTGGGCCCGAATGCTTCCCGATAATAATAGTTTGTTTTCCCCTCTTATCTTTATTCAGAGATGTGAAAGGGCGGACGGTGACGTTACCCCCTTCTCAAATGCCAAGGGGCTCGTGATTGCATTTTCTTCATTGCGGATTCTCATTTGGGCATAATTATACACATATAAATCGATAAAAATTCTAGACAATCCTTTTGTTGGCGTGGATACGCTTCTCTTTTTTCTTCCGTTTGCGGGCATACATCTTTACGACGAACTAAACTCTTTTGATCTGGGGGGGGACC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
?TAGCGTAAATGTAATCCAATCTATATCAACGATAGAATCTATTTTAATGAGTGTCAATTTATACATGAAAGTCTGTTTATAAATTTTTAAGTAGCAATAAATGAGATTGTATTACTGACATAAATGGAGCCAGTAAGTTCCCCAAAATTTAAAATTTATATGCTCATCTAATCTTAATTAATAAATGAGAATGGGAGAATGATAAAGTTCCCCACTTATTATATGCCTAAGAGTTAGGGTTAGTATTTTTTACTTAGTGGATTCTTACTAGAGTATATTTATATAAATATATAACAATATATAATTTTGTCAAACTTATTGATAGAGAGAATAAGATACTCCTATATTTACAGTTAGTGAGTATATAACTTAAGGTCAATCTATACTATTTTGTTCTCGAGAGAGTC??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>COI_3rd_codon
--------------------
>CP100-10_Papilionoidea_Melitaea_diamina
????????ACTATTACATTTTACAAATTTTATATTATTTCTAATTTTTATTTATGATATAATTTATAAAAGACATATCCAATTAATAAGTACATTATATATAATGAATAAATCCATATTTCTAATAGTATTTTATATGTCTCAATTTTTTATTTAATTTATTTAATATAAAAATAAATCAATAATATATTTATAGTATTTCATTTCCAAAT?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
>CP100-11_Melitaea_diamina
GCGTTGCCTGTTTGCATGACGTTTGAAATAACTTCCACTTTTTTTTTCTTTGGTGAGTTCTTTGCCATCTCGTAATGTGTTCCCTTTTTCGGTTAAGCGCGGCTACCTCCATCAGGCCTATCTTCTATCGTCCTTGCTATTCCTTATGTAATCAAATCTTTGCTGTCCTTTTTCTCTTCGCTCTTTCAGATACCTTACGGGGAC????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
"""
        result = dataset_creator.dataset_str
        self.assertEqual(expected.strip(), result)

    def test_has_no_sequences_for_input_voucher(self):
        cleaned_data = self.cleaned_data
        cleaned_data['voucher_codes'] = 'CP100-10\r\nCP100-11\r\nCP1000'
        dataset_creator = CreateDataset(cleaned_data)
        self.assertTrue('Could not find voucher CP1000' in dataset_creator.warnings)

    def test_creating_dataset_filename(self):
        tmp_file_name = 'MEGA_b879d2a046d04821be618bf481b6b08d.txt'
        result = guess_file_extension(tmp_file_name)
        expected = 'MEGA_b879d2a046d04821be618bf481b6b08d.meg'
        self.assertEqual(expected, result)
